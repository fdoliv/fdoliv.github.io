<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-05T14:28:48-03:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">./Felipe Oliveira</title><subtitle>Hello folks, I'm a student of computer science from Pernambuco, Brazil. This blog is for documentation about my research journey,  programming, and related.</subtitle><author><name>Felipe Oliveira</name></author><entry><title type="html">The Mercury Environment: A Modeling Tool for Performance and Dependability Evaluation</title><link href="http://localhost:4000/papers/dependability/mercury/2021/07/07/mercury/" rel="alternate" type="text/html" title="The Mercury Environment: A Modeling Tool for Performance and Dependability Evaluation" /><published>2021-07-07T08:24:00-03:00</published><updated>2021-07-07T08:24:00-03:00</updated><id>http://localhost:4000/papers/dependability/mercury/2021/07/07/mercury</id><content type="html" xml:base="http://localhost:4000/papers/dependability/mercury/2021/07/07/mercury/">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;: It is important to be able to judge the performance or dependability metrics of a system and often we do so by using abstract models even when the system is in the conceptual phase. Evaluating a system by performing measurements can have a high temporal and/or financial cost, which may not be feasible. Mathematical models can provide estimates about system behavior and we need tools supporting different types of formalisms in order to compute desired metrics. The Mercury tool enables a range of models to be created and evaluated for supporting performance and dependability evaluations, such as reliability block diagrams (RBDs), dynamic RBDs (DRBDs), fault trees (FTs), stochastic Petri nets (SPNs), continuous and discrete-time Markov chains (CTMCs and DTMCs), as well as energy flow models (EFMs). In this paper, we introduce recent enhancements to Mercury, namely new SPN simulators, support to prioritized timed transitions, sensitivity analysis evaluation, several improvements to the usability of the tool, and support to DTMC and FT formalisms.&lt;/p&gt;

&lt;p&gt;Details in this &lt;a href=&quot;https://doi.org/10.3233/AISE210075&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="Papers" /><category term="Dependability" /><category term="Mercury" /><summary type="html">Abstract: It is important to be able to judge the performance or dependability metrics of a system and often we do so by using abstract models even when the system is in the conceptual phase. Evaluating a system by performing measurements can have a high temporal and/or financial cost, which may not be feasible. Mathematical models can provide estimates about system behavior and we need tools supporting different types of formalisms in order to compute desired metrics. The Mercury tool enables a range of models to be created and evaluated for supporting performance and dependability evaluations, such as reliability block diagrams (RBDs), dynamic RBDs (DRBDs), fault trees (FTs), stochastic Petri nets (SPNs), continuous and discrete-time Markov chains (CTMCs and DTMCs), as well as energy flow models (EFMs). In this paper, we introduce recent enhancements to Mercury, namely new SPN simulators, support to prioritized timed transitions, sensitivity analysis evaluation, several improvements to the usability of the tool, and support to DTMC and FT formalisms.</summary></entry><entry><title type="html">Software Aging in Container-based Virtualization: An Experimental Analysis on Docker Platform</title><link href="http://localhost:4000/papers/aging/virtualization/docker/2021/06/26/swad-cisti2021/" rel="alternate" type="text/html" title="Software Aging in Container-based Virtualization: An Experimental Analysis on Docker Platform" /><published>2021-06-26T20:30:09-03:00</published><updated>2021-06-26T20:30:09-03:00</updated><id>http://localhost:4000/papers/aging/virtualization/docker/2021/06/26/swad-cisti2021</id><content type="html" xml:base="http://localhost:4000/papers/aging/virtualization/docker/2021/06/26/swad-cisti2021/">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;: Lightweight virtualization, and specifically containers, has become widespread in the information technology industry to provide an efficient operational environment for the execution of scalable services on the Internet. Containers rely on a set of technologies different from the features that enable hardware virtualization (i.e., hypervisor-based virtual machines). However, both types of virtualized environments are employed to host applications that will be accessible anytime, anywhere. Thus, they are prone to software aging, which usually affects systems that run for long time intervals. Researchers have identified software aging effects in distinct types of cloud computing environments and hypervisors over recent years. However, a few works have dealt with this phenomenon in container-based platforms. This paper presents an experimental analysis of the software aging effects observed on Docker platforms while also evaluating the fitness of a time-series model to predict resource consumption’s progress caused by software aging. We employ a stress test workload tailored for the scenario of containers arranged in a cluster managed by Docker Swarm. The obtained results indicate an increasing usage of resident memory, virtual memory, and CPU usage, as the system undergoes subsequent scale-up and scale-down operations. The quadratic trend model was the best fitting approach for predicting resident and virtual memory usage, with less than 5% of prediction error. The experimental approach presented here may help systems administrators to detect evidence of software aging in container-based environments, and allowing then to choose a proper method and time for deploying rejuvenation actions to mitigate the dependability issues raised in similar scenarios described here.&lt;/p&gt;

&lt;p&gt;Details in this &lt;a href=&quot;https://doi.org/10.23919/CISTI52073.2021.9476625&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="Papers" /><category term="Aging" /><category term="Virtualization" /><category term="Docker" /><summary type="html">Abstract: Lightweight virtualization, and specifically containers, has become widespread in the information technology industry to provide an efficient operational environment for the execution of scalable services on the Internet. Containers rely on a set of technologies different from the features that enable hardware virtualization (i.e., hypervisor-based virtual machines). However, both types of virtualized environments are employed to host applications that will be accessible anytime, anywhere. Thus, they are prone to software aging, which usually affects systems that run for long time intervals. Researchers have identified software aging effects in distinct types of cloud computing environments and hypervisors over recent years. However, a few works have dealt with this phenomenon in container-based platforms. This paper presents an experimental analysis of the software aging effects observed on Docker platforms while also evaluating the fitness of a time-series model to predict resource consumption’s progress caused by software aging. We employ a stress test workload tailored for the scenario of containers arranged in a cluster managed by Docker Swarm. The obtained results indicate an increasing usage of resident memory, virtual memory, and CPU usage, as the system undergoes subsequent scale-up and scale-down operations. The quadratic trend model was the best fitting approach for predicting resident and virtual memory usage, with less than 5% of prediction error. The experimental approach presented here may help systems administrators to detect evidence of software aging in container-based environments, and allowing then to choose a proper method and time for deploying rejuvenation actions to mitigate the dependability issues raised in similar scenarios described here.</summary></entry><entry><title type="html">A Software Maintenance Methodology: An Approach Applied to Software Aging</title><link href="http://localhost:4000/papers/aging/methodology/2021/05/15/swa-syscon21/" rel="alternate" type="text/html" title="A Software Maintenance Methodology: An Approach Applied to Software Aging" /><published>2021-05-15T20:30:09-03:00</published><updated>2021-05-15T20:30:09-03:00</updated><id>http://localhost:4000/papers/aging/methodology/2021/05/15/swa-syscon21</id><content type="html" xml:base="http://localhost:4000/papers/aging/methodology/2021/05/15/swa-syscon21/">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;: The increasing use of computational systems has highlighted concerns about attributes that may influence the quality of service, such as performance, availability, reliability, and maintenance capacity. Failures in the software development process may impact these attributes. Flawed code and overall software misdesign may cause internal errors, leading to system malfunction. Some errors might be identified and fixed during the software testing process. However, other errors may manifest only during the production stage. This is the case of the software aging phenomenon, which is related to the progressive degradation that a software performance or reliability suffers during its operational life. This paper proposes a methodology for software maintenance that is tailored to identify, correct, and mitigate the software aging effects. If the source code can be modified and a new version deployed with minimal impact, thus data from aging detection is used for corrective maintenance, i.e., for fixing the bug the causes the aging effects. If the software cannot be fixed nor its version updated without long system interruption or other bad consequences, then our approach can mitigate the aging effects, in a preventive maintenance to avoid service outages. The proposed methodology is validated through both Stochastic Petri Net (SPN) models and experiments in a controlled environment. The model evaluation considering a hybrid maintenance routine (preventive and corrective) yielded an availability of 99.82%, representing an annual downtime of 15.9 hours. By contrast, the baseline scenario containing only reactive maintenance (i.e., repairing only after failure) had more than 1342 hours of annual downtime - 80 times higher than the proposed approach.&lt;/p&gt;

&lt;p&gt;Details in this &lt;a href=&quot;https://doi.org/10.1109/SysCon48628.2021.9447082&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="Papers" /><category term="Aging" /><category term="Methodology" /><summary type="html">Abstract: The increasing use of computational systems has highlighted concerns about attributes that may influence the quality of service, such as performance, availability, reliability, and maintenance capacity. Failures in the software development process may impact these attributes. Flawed code and overall software misdesign may cause internal errors, leading to system malfunction. Some errors might be identified and fixed during the software testing process. However, other errors may manifest only during the production stage. This is the case of the software aging phenomenon, which is related to the progressive degradation that a software performance or reliability suffers during its operational life. This paper proposes a methodology for software maintenance that is tailored to identify, correct, and mitigate the software aging effects. If the source code can be modified and a new version deployed with minimal impact, thus data from aging detection is used for corrective maintenance, i.e., for fixing the bug the causes the aging effects. If the software cannot be fixed nor its version updated without long system interruption or other bad consequences, then our approach can mitigate the aging effects, in a preventive maintenance to avoid service outages. The proposed methodology is validated through both Stochastic Petri Net (SPN) models and experiments in a controlled environment. The model evaluation considering a hybrid maintenance routine (preventive and corrective) yielded an availability of 99.82%, representing an annual downtime of 15.9 hours. By contrast, the baseline scenario containing only reactive maintenance (i.e., repairing only after failure) had more than 1342 hours of annual downtime - 80 times higher than the proposed approach.</summary></entry><entry><title type="html">Experimental Evaluation of Software Aging Effects in a Container-Based Virtualization Platform</title><link href="http://localhost:4000/papers/aging/container/2020/10/14/experimental-smc/" rel="alternate" type="text/html" title="Experimental Evaluation of Software Aging Effects in a Container-Based Virtualization Platform" /><published>2020-10-14T20:30:09-03:00</published><updated>2020-10-14T20:30:09-03:00</updated><id>http://localhost:4000/papers/aging/container/2020/10/14/experimental-smc</id><content type="html" xml:base="http://localhost:4000/papers/aging/container/2020/10/14/experimental-smc/">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;: Cloud-based architectures have grown in recent years, especially the interest in container-based solutions have sharply increased by enterprises worldwide. Containers are a form of lightweight virtualization that can be used to provide cloud services. Adopting this kind of technology in a bare- metal context is becoming strong because they can offer many benefits, like performance efficiency and costs reduction. Docker is a widespread platform for the creation and management of containers. As in any computational cloud service, Docker environments must deal with the intensive workload and may have a long-term life cycle, which might trigger some problems that compromise the system dependability. The software aging phenomenon is one of these likely problems. It is a process of cumulative errors or system misbehavior that leads to application failures and performance degradation throughout its runtime. This paper aims to monitor and evaluate software aging effects on the Docker platform in a cloud computing environment. We conducted two experimental studies with automated workloads to simulate containers’ life cycle and the intensive use of Docker features, while the system was monitored. The results show high resource consumption by the operating system’s network utility, in addition to memory fragmentation in the sub-processes of the Docker platform. Trends of increasing resident memory consumption were also observed in one of these scenarios.&lt;/p&gt;

&lt;p&gt;Details in this &lt;a href=&quot;https://doi.org/10.1109/SMC42975.2020.9283358&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="Papers" /><category term="Aging" /><category term="container" /><summary type="html">Abstract: Cloud-based architectures have grown in recent years, especially the interest in container-based solutions have sharply increased by enterprises worldwide. Containers are a form of lightweight virtualization that can be used to provide cloud services. Adopting this kind of technology in a bare- metal context is becoming strong because they can offer many benefits, like performance efficiency and costs reduction. Docker is a widespread platform for the creation and management of containers. As in any computational cloud service, Docker environments must deal with the intensive workload and may have a long-term life cycle, which might trigger some problems that compromise the system dependability. The software aging phenomenon is one of these likely problems. It is a process of cumulative errors or system misbehavior that leads to application failures and performance degradation throughout its runtime. This paper aims to monitor and evaluate software aging effects on the Docker platform in a cloud computing environment. We conducted two experimental studies with automated workloads to simulate containers’ life cycle and the intensive use of Docker features, while the system was monitored. The results show high resource consumption by the operating system’s network utility, in addition to memory fragmentation in the sub-processes of the Docker platform. Trends of increasing resident memory consumption were also observed in one of these scenarios.</summary></entry><entry><title type="html">How to download youtube live streams?</title><link href="http://localhost:4000/tutorial/youtube/2020/09/04/download-video-live/" rel="alternate" type="text/html" title="How to download youtube live streams?" /><published>2020-09-04T00:00:00-03:00</published><updated>2020-09-04T00:00:00-03:00</updated><id>http://localhost:4000/tutorial/youtube/2020/09/04/download-video-live</id><content type="html" xml:base="http://localhost:4000/tutorial/youtube/2020/09/04/download-video-live/">&lt;p&gt;Today I needed to download live stream videos from youtube (i.e., that are still live). To do this, I used the command-line utility &lt;a href=&quot;https://streamlink.github.io/&quot; target=&quot;_blank&quot;&gt;Streamlink&lt;/a&gt;, which extracts streams from various services and pipes them into a video player of choice or a file.&lt;/p&gt;

&lt;h1 id=&quot;install-streamlink&quot;&gt;Install Streamlink&lt;/h1&gt;

&lt;p&gt;To install Streamlink on Debian like systems, we need to execute on terminal:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;streamlink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;streamlink-usage&quot;&gt;Streamlink usage&lt;/h1&gt;
&lt;p&gt;Now, to use the tool we need to run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink &lt;span class=&quot;nt&quot;&gt;--hls-live-restart&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &amp;lt;output file name&amp;gt; &amp;lt;URL&amp;gt; best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--hls-live-restart&lt;/code&gt; parameter is to skip to the beginning of a live stream, or as far back as possible. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-o&lt;/code&gt; parameter is to set the output file, were is indicate in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;output file name&amp;gt;&lt;/code&gt;. Replacing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;URL&amp;gt;&lt;/code&gt; with the video URL (e.g. from youtube),we indicate the source site of the video. Finally, the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best&lt;/code&gt; is to indicate the stream quality, it also can be 144p (worst), 240p, 360p, 480p, 720p (best).&lt;/p&gt;

&lt;p&gt;For example, we can download the &lt;a href=&quot;https://youtu.be/21X5lGlDOfg&quot; target=&quot;_blank&quot;&gt;NASA TV video stream&lt;/a&gt; from youtube. To do this is enouth run in terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink &lt;span class=&quot;nt&quot;&gt;--hls-live-restart&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; nasa.mp4 https://youtu.be/21X5lGlDOfg best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Felipe Oliveira</name></author><category term="Tutorial" /><category term="Youtube" /><summary type="html">Today I needed to download live stream videos from youtube (i.e., that are still live). To do this, I used the command-line utility Streamlink, which extracts streams from various services and pipes them into a video player of choice or a file.</summary></entry><entry><title type="html">Impactos da IoT na Avicultura: um Mapeamento Sistemático</title><link href="http://localhost:4000/iot/poultry/automation/papers/2019/11/14/iot-avicultura/" rel="alternate" type="text/html" title="Impactos da IoT na Avicultura: um Mapeamento Sistemático" /><published>2019-11-14T20:30:09-03:00</published><updated>2019-11-14T20:30:09-03:00</updated><id>http://localhost:4000/iot/poultry/automation/papers/2019/11/14/iot-avicultura</id><content type="html" xml:base="http://localhost:4000/iot/poultry/automation/papers/2019/11/14/iot-avicultura/">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;: Brazil is today the largest exporter and the second largest producer worldwide of chicken meat. Despite such prominent position, the lack of data about the use of tools based on Internet of Things (IoT) at national poultry farming leads to the hypothesis that the most Brazilian poultry farmers still use conventional methods to the detriment of higher productivity. In this work, we mapped 17 publications from the international literature that show IoT-based solutions that pass through food safety, environmental production factors, traceability, and animal health. This way, we expect to contribute to a discussion between the computer and agribusiness scientific communities through a systematic review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resumo&lt;/strong&gt;: O Brasil é hoje o maior exportador e o segundo maior produtor mundial de carne de frango. Apesar dessa posição de destaque, a ausência de dados sobre a utilização de ferramentas baseadas em ​Internet of Things (IoT) na indústria de avicultura nacional reforça a hipótese de que a maior parte dos avicultores brasileiros ainda usam métodos convencionais de operação em detrimento de uma maior produtividade. Nesse estudo, foram mapeados 17 trabalhos da literatura internacional que apresentam soluções baseadas em IoT que perpassam desde a segurança alimentar, fatores ambientais de produção, rastreabilidade e saúde dos animais. Espera-se, portanto, contribuir para discussão entre a comunidade científica da computação e do agronegócio por meio de uma revisão sistemática.&lt;/p&gt;

&lt;p&gt;Details in this &lt;a href=&quot;https://www.researchgate.net/publication/342349795_Impactos_da_IoT_na_Avicultura_um_Mapeamento_Sistematico&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="IoT" /><category term="Poultry" /><category term="Automation" /><category term="Papers" /><summary type="html">Abstract: Brazil is today the largest exporter and the second largest producer worldwide of chicken meat. Despite such prominent position, the lack of data about the use of tools based on Internet of Things (IoT) at national poultry farming leads to the hypothesis that the most Brazilian poultry farmers still use conventional methods to the detriment of higher productivity. In this work, we mapped 17 publications from the international literature that show IoT-based solutions that pass through food safety, environmental production factors, traceability, and animal health. This way, we expect to contribute to a discussion between the computer and agribusiness scientific communities through a systematic review.</summary></entry><entry><title type="html">Introdução ao GNU/Linux - Comandos e Scripts</title><link href="http://localhost:4000/linux/infrastructure/ti/opensource/course/2019/10/26/course-linux-copy/" rel="alternate" type="text/html" title="Introdução ao GNU/Linux - Comandos e Scripts" /><published>2019-10-26T19:46:49-03:00</published><updated>2019-10-26T19:46:49-03:00</updated><id>http://localhost:4000/linux/infrastructure/ti/opensource/course/2019/10/26/course-linux%20copy</id><content type="html" xml:base="http://localhost:4000/linux/infrastructure/ti/opensource/course/2019/10/26/course-linux-copy/">&lt;p&gt;On October 25, 2019:  I taught the Introduction to GNU / LINUX  - Commands and Scripts short course, offered by “&lt;a href=&quot;http://lmts.uag.ufrpe.br&quot; target=&quot;_blank&quot;&gt;Laboratório Multidisciplinar de Tecnologias Sociais (LMTS)&lt;/a&gt;” to students of computer science in Garanhuns-PE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/EgiOUnOXcAIvNI-?format=jpg&amp;amp;name=large&quot; alt=&quot;Public call&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/EgiOUnaXkAQLNKn?format=jpg&amp;amp;name=large&quot; alt=&quot;Participants&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Details in this &lt;a href=&quot;http://lmts.uag.ufrpe.br/br/noticia/lmts-promove-mais-um-minicurso-de-tecnologia-nesse-m%C3%AAs-de-outubro&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="Linux" /><category term="Infrastructure" /><category term="TI" /><category term="OpenSource" /><category term="Course" /><summary type="html">On October 25, 2019: I taught the Introduction to GNU / LINUX - Commands and Scripts short course, offered by “Laboratório Multidisciplinar de Tecnologias Sociais (LMTS)” to students of computer science in Garanhuns-PE.</summary></entry><entry><title type="html">Referências sobre REST APIs</title><link href="http://localhost:4000/api/rest/2019/05/20/referencias-sobre-apis/" rel="alternate" type="text/html" title="Referências sobre REST APIs" /><published>2019-05-20T20:30:09-03:00</published><updated>2019-05-20T20:30:09-03:00</updated><id>http://localhost:4000/api/rest/2019/05/20/referencias-sobre-apis</id><content type="html" xml:base="http://localhost:4000/api/rest/2019/05/20/referencias-sobre-apis/">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&quot;&gt;Best Practices for Designing a Pragmatic RESTful API (►)&lt;/a&gt; - Lista bem completa sobre boas práticas para a construção de APIs RESTful.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=psLrAsdHltQ&quot;&gt;Webinar Design de APIs RESTful (►)&lt;/a&gt; - Webinar sobre projeto de APIs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3GAF2t5Qohc&quot;&gt;APIs do Jeito Certo (►)&lt;/a&gt; - Apresentação sobre boas práticas no desenvolvimento de APIs que aborda assuntos como documentação, autenticação e segurança.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pYI-xievuOo&quot;&gt;Existe Vida Além do REST? (►)&lt;/a&gt; - Apresentação sobre APIs REST com discussão sobre a vantagem/desvantagem de se utilizar as diferentes abordagens na criação de APIs.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Felipe Oliveira</name></author><category term="API" /><category term="REST" /><summary type="html">Best Practices for Designing a Pragmatic RESTful API (►) - Lista bem completa sobre boas práticas para a construção de APIs RESTful. Webinar Design de APIs RESTful (►) - Webinar sobre projeto de APIs. APIs do Jeito Certo (►) - Apresentação sobre boas práticas no desenvolvimento de APIs que aborda assuntos como documentação, autenticação e segurança. Existe Vida Além do REST? (►) - Apresentação sobre APIs REST com discussão sobre a vantagem/desvantagem de se utilizar as diferentes abordagens na criação de APIs.</summary></entry><entry><title type="html">Como instalar o systemtap no debian</title><link href="http://localhost:4000/systemtap/instrumentation/infraestructure/ti/2019/03/07/systemtap-instalation/" rel="alternate" type="text/html" title="Como instalar o systemtap no debian" /><published>2019-03-07T20:30:09-03:00</published><updated>2019-03-07T20:30:09-03:00</updated><id>http://localhost:4000/systemtap/instrumentation/infraestructure/ti/2019/03/07/systemtap-instalation</id><content type="html" xml:base="http://localhost:4000/systemtap/instrumentation/infraestructure/ti/2019/03/07/systemtap-instalation/">&lt;p&gt;Os passos desta instalação do &lt;a href=&quot;https://sourceware.org/systemtap/&quot; target=&quot;_blank&quot;&gt;systemtap&lt;/a&gt; foram realizados no Debian 9, mas segundo a &lt;a href=&quot;https://sourceware.org/systemtap/documentation.html&quot; target=&quot;_blank&quot;&gt;documentação oficial&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Systemtap works with official Debian kernel packages since the Squeeze release (with the exception of user space probes that are not supported yet, see Debian bug #691167). To use systemtap you need to manually install the linux-image-&lt;em&gt;-dbg and linux-header-&lt;/em&gt; packages that match your running kernel. To simplify this task you can use the stap-prep command. Please always run this before reporting a bug.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Passos da instalação&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instalar o systemtap via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install systemtap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install linux-headers-$(uname -r) &amp;amp;&amp;amp; linux-image-$(uname -r)-dbg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Verificando a instalação e executando um &lt;em&gt;Hello, World!&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stap -e 'probe begin { printf(&quot;Hello, World!\n&quot;); exit() }'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se um usuário não administrador (não &lt;em&gt;root&lt;/em&gt;) for utilizar o systemtap, é necessário o adicionar nos grupos &lt;em&gt;stapusr, stapdev, stapsys&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usermod -a -G grupo usuario&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Após a reinicialização, será possível utilizar com o usuário.&lt;/p&gt;</content><author><name>Felipe Oliveira</name></author><category term="Systemtap" /><category term="Instrumentation" /><category term="Infraestructure" /><category term="TI" /><summary type="html">Os passos desta instalação do systemtap foram realizados no Debian 9, mas segundo a documentação oficial:</summary></entry><entry><title type="html">How to export a VM Virtualbox to a Xen virtual machine</title><link href="http://localhost:4000/virtualbox/xen/infraestructure/ti/2019/03/06/convert-vbox-xen/" rel="alternate" type="text/html" title="How to export a VM Virtualbox to a Xen virtual machine" /><published>2019-03-06T20:30:09-03:00</published><updated>2019-03-06T20:30:09-03:00</updated><id>http://localhost:4000/virtualbox/xen/infraestructure/ti/2019/03/06/convert-vbox-xen</id><content type="html" xml:base="http://localhost:4000/virtualbox/xen/infraestructure/ti/2019/03/06/convert-vbox-xen/">&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; can convert your VDI disk image to a RAW disk
  VBoxManage clonehd centos6.vdi centos6.img -format RAW&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Refer to the centos6.vbox file, and create the configuration file for Xen VM.  You can do this manually or create a shell script that would extract the necessary fields and parse them into Xen configuration file.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cat /etc/xen/centos6
  name = &quot;centos6&quot;
  uuid = &quot;f220932f-8750-4f5b-b220-8050210e9835&quot;
  memory = 1024
  vcpus = 1
  bootloader = &quot;/usr/bin/pygrub&quot;
  on_poweroff = &quot;destroy&quot;
  on_reboot = &quot;restart&quot;
  on_crash = &quot;restart&quot;
  disk = [ &quot;file:/var/lib/xen/images/centos6.img,xvda,w&quot; ]
  vif = [ &quot;mac=00:16:3e:46:e6:fb,bridge=xenbr0&quot; ]
  extra=&quot;console=hvc0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Felipe Oliveira</name></author><category term="VirtualBox" /><category term="Xen" /><category term="Infraestructure" /><category term="TI" /><summary type="html">Step 1: can convert your VDI disk image to a RAW disk VBoxManage clonehd centos6.vdi centos6.img -format RAW</summary></entry></feed>